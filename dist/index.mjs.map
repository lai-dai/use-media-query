{"version":3,"sources":["../src/use-media-query.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst canUseDOM = !!(\r\n  typeof window !== \"undefined\" &&\r\n  window.document &&\r\n  window.document.createElement\r\n);\r\n\r\nexport const mediaQuerySizeMap = {\r\n  xs: \"(max-width: 639px)\",\r\n  sm: \"(min-width: 640px)\",\r\n  md: \"(min-width: 768px)\",\r\n  lg: \"(min-width: 1024px)\",\r\n  xl: \"(min-width: 1280px)\",\r\n  \"2xl\": \"(min-width: 1536px)\",\r\n};\r\n\r\nconst matchMedia = (query: string) => {\r\n  if (canUseDOM) {\r\n    return window.matchMedia(query);\r\n  }\r\n\r\n  return {\r\n    matches: false,\r\n    media: query,\r\n  } as MediaQueryList;\r\n};\r\n\r\n/**\r\n * React hook that tracks state of a CSS media query\r\n */\r\nexport function useMediaQuery(\r\n  /**\r\n   * xs: \"(max-width: 639px)\" |\r\n   * sm: \"(min-width: 640px)\" |\r\n   * md: \"(min-width: 768px)\" |\r\n   * lg: \"(min-width: 1024px)\" |\r\n   * xl: \"(min-width: 1280px)\" |\r\n   * \"2xl\": \"(min-width: 1536px)\" |\r\n   */\r\n  query: string | (keyof typeof mediaQuerySizeMap)[]\r\n): any;\r\nexport function useMediaQuery(\r\n  query: keyof typeof mediaQuerySizeMap | string[]\r\n): any;\r\nexport function useMediaQuery(query: string | string[]): boolean | boolean[] {\r\n  const queries = Array.isArray(query) ? query : [query];\r\n  const mediaQueries = queries.map(\r\n    (query) =>\r\n      mediaQuerySizeMap?.[query as keyof typeof mediaQuerySizeMap] || query\r\n  );\r\n\r\n  const [mediaQueryArray, setMediaQueryArray] = useState(() =>\r\n    mediaQueries.map((query) => matchMedia(query).matches)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const list = mediaQueries.map((query) => matchMedia(query));\r\n    const handleChange = (event: MediaQueryListEvent) => {\r\n      const index = list.findIndex((item) => item.media === event.media);\r\n      if (index !== -1) {\r\n        setMediaQueryArray((prev) => {\r\n          const result = [...prev];\r\n          result[index] = event.matches;\r\n\r\n          return result;\r\n        });\r\n      }\r\n    };\r\n\r\n    list.forEach((query) => {\r\n      query.addEventListener(\"change\", handleChange);\r\n    });\r\n\r\n    return () =>\r\n      list.forEach((query) => {\r\n        query.removeEventListener(\"change\", handleChange);\r\n      });\r\n  }, [mediaQueries]);\r\n\r\n  return Array.isArray(query) ? mediaQueryArray : mediaQueryArray[0];\r\n}\r\n"],"mappings":";AAAA,SAAS,WAAW,gBAAgB;AAEpC,IAAM,YAAY,CAAC,EACjB,OAAO,WAAW,eAClB,OAAO,YACP,OAAO,SAAS;AAGX,IAAM,oBAAoB;AAAA,EAC/B,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,OAAO;AACT;AAEA,IAAM,aAAa,CAAC,UAAkB;AACpC,MAAI,WAAW;AACb,WAAO,OAAO,WAAW,KAAK;AAAA,EAChC;AAEA,SAAO;AAAA,IACL,SAAS;AAAA,IACT,OAAO;AAAA,EACT;AACF;AAmBO,SAAS,cAAc,OAA+C;AAC3E,QAAM,UAAU,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AACrD,QAAM,eAAe,QAAQ;AAAA,IAC3B,CAACA,WACC,oBAAoBA,MAAuC,KAAKA;AAAA,EACpE;AAEA,QAAM,CAAC,iBAAiB,kBAAkB,IAAI;AAAA,IAAS,MACrD,aAAa,IAAI,CAACA,WAAU,WAAWA,MAAK,EAAE,OAAO;AAAA,EACvD;AAEA,YAAU,MAAM;AACd,UAAM,OAAO,aAAa,IAAI,CAACA,WAAU,WAAWA,MAAK,CAAC;AAC1D,UAAM,eAAe,CAAC,UAA+B;AACnD,YAAM,QAAQ,KAAK,UAAU,CAAC,SAAS,KAAK,UAAU,MAAM,KAAK;AACjE,UAAI,UAAU,IAAI;AAChB,2BAAmB,CAAC,SAAS;AAC3B,gBAAM,SAAS,CAAC,GAAG,IAAI;AACvB,iBAAO,KAAK,IAAI,MAAM;AAEtB,iBAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF;AAEA,SAAK,QAAQ,CAACA,WAAU;AACtB,MAAAA,OAAM,iBAAiB,UAAU,YAAY;AAAA,IAC/C,CAAC;AAED,WAAO,MACL,KAAK,QAAQ,CAACA,WAAU;AACtB,MAAAA,OAAM,oBAAoB,UAAU,YAAY;AAAA,IAClD,CAAC;AAAA,EACL,GAAG,CAAC,YAAY,CAAC;AAEjB,SAAO,MAAM,QAAQ,KAAK,IAAI,kBAAkB,gBAAgB,CAAC;AACnE;","names":["query"]}